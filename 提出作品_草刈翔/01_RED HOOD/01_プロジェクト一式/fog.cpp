//=============================================================================
// フォグ(霧)処理 [mesh_sphere.cpp]
// Author : 草刈 翔
//=============================================================================
//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "fog.h"
#include "manager.h"
#include "renderer.h"
#include "scene3D.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CFog::CFog(int nPriority) : CScene(nPriority)
{
	// 変数のクリア
	m_col = D3DCOLOR_RGBA(0, 0, 0, 255);
	m_fStartFog = 0.0f;
	m_fEngFog = 0.0f;
}

//=============================================================================
// デストラクタ
//=============================================================================
CFog::~CFog()
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CFog::Init(D3DXVECTOR3 pos)
{
	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CFog::Uninit(void)
{
	
}

//=============================================================================
// 更新処理
//=============================================================================
void CFog::Update(void)
{

}

//=============================================================================
// 描画処理
//=============================================================================
void CFog::Draw(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	// 霧のブレンドを有効に
	pDevice->SetRenderState(D3DRS_FOGENABLE, TRUE);
	// 霧の色を設定
	pDevice->SetRenderState(D3DRS_FOGCOLOR, m_col);

	// 種類を頂点霧に設定し、線形霧で計算する
	pDevice->SetRenderState(D3DRS_FOGVERTEXMODE, D3DFOG_LINEAR);
	pDevice->SetRenderState(D3DRS_FOGSTART, *(DWORD *)(&m_fStartFog));
	pDevice->SetRenderState(D3DRS_FOGEND, *(DWORD *)(&m_fEngFog));

	// 霧の範囲ベースを有効に
	pDevice->SetRenderState(D3DRS_RANGEFOGENABLE, TRUE);
}

//=============================================================================
// 生成処理
//=============================================================================
CFog* CFog::Create(D3DXCOLOR col, float fStart, float fEnd)
{
	// クラスの生成
	CFog *pFog = NULL;
	pFog = new CFog;
	
	if (pFog != NULL)
	{
		// 変数の初期化
		pFog->m_col = col;
		pFog->m_fStartFog = fStart;
		pFog->m_fEngFog = fEnd;

		// 初期化処理
		pFog->Init(D3DXVECTOR3(0.0f, 0.0f, 0.0f));
	}
	return pFog;
}

//=============================================================================
// 計算用の変数の設定
//=============================================================================
void CFog::SetFogLine(float fStart, float fEnd)
{
	m_fStartFog = fStart;
	m_fEngFog = fEnd;
}